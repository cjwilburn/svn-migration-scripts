import Git._
import sys.process._

object Tags {

  /**
   * Create annotated tags for the Subversion tags converted by git-svn.
   */
  def annotate()(implicit dryRun: Boolean) {
    println("# Creating annotated tags...")

    Seq("git", "for-each-ref", "--format=%(refname)", "refs/remotes/tags/*").lines

      // ignore intermediate references generated by git-svn, like tag@42,
      // when it can not link the source of the copy to an existing remote;
      // otherwise "git-rev-parse --verify" (below) fails because it parses
      // tag@42 as an ordinal specification (i.e. tag@{42})
      .filterNot(isIntermediateRef(_))
      .foreach {

      tag_ref =>
        val tag = tag_ref stripPrefix "refs/remotes/tags/"
        val tree = $("git", "rev-parse", tag_ref)

        // Find the oldest ancestor for which the tree is the same.
        var parent_ref = tag_ref
        while ($("git", "rev-parse", "--quiet", "--verify", parent_ref + "^:") == tree) {
          parent_ref = parent_ref + "^"
        }

        // If this ancestor is in trunk then we can just tag it, otherwise the tag has diverged from trunk
        // and it's actually more like a branch than a tag.
        val target_ref = try {
          val parent = $("git", "rev-parse", parent_ref)
          if ($("git", "merge-base", "refs/remotes/trunk", parent) == parent) {
            parent
          } else {
            println("tag has diverged: " + tag)
            tag_ref
          }
        } catch {
          case ex: RuntimeException => tag_ref
        }

        // Create an annotated tag based on the last commit in the tag, and delete the "branchy" ref for the tag.
        println("Creating annotated tag: " + tag)
        if (!dryRun) {
          Seq("git", "show", "-s", "--pretty=format:%s%n%n%b", tag_ref) #|
          Process(Seq("git", "tag", "-f", "-a", "-F", "-", tag, target_ref), None,
              "GIT_COMMITTER_NAME" -> $("git", "show", "-s", "--pretty=format:%an", tag_ref),
              "GIT_COMMITTER_EMAIL" -> $("git", "show", "-s", "--pretty=format:%ae", tag_ref),
              "GIT_COMMITTER_DATE" -> $("git", "show", "-s", "--pretty=format:%ad", tag_ref)) !;
        }
    }
  }

  /**
   * Remove tags that does not exist in Subversion.
   */
  def checkObsolete(urls: Array[String])(implicit dryRun: Boolean) {
    println("# Checking for obsolete tags...")

    // find the list of tags in SVN
    val svnTags = Svn.findSvnItems(urls)

    // find the list of tags in Git
    val gitTags = Seq("git", "for-each-ref", "refs/tags", "--format=%(refname)").lines
      .map(_ stripPrefix "refs/tags/")
      .map(ref => (decodeRef(ref), ref))

    // remove the tags deleted in SVN
    gitTags.foreach {
      case (tag, ref) =>
        if (!(svnTags contains tag)) {
          if (dryRun) {
            println("Deleting Git tag not in Subversion: " + ref)
          } else {
            Seq("git", "tag", "-d", ref).!
          }
        }
    }

    // determine the tags in SVN but not Git
    //(note: this should never happen if the correct tag root(s) were given to git-svn)
    svnTags.foreach {
      tag =>
        if (gitTags.filter{ case (t, _) => t == tag }.isEmpty) {
          println("This Subversion tag is not in Git: " + tag)
        }
    }
  }

  /**
   * Fix tag names after conversion.
   */
  def fixNames() {
    println("# Cleaning tag names")

    // list Git tag that needs fixing
    Seq("git", "for-each-ref", "refs/tags", "--format=%(refname)").lines
      .map(_ stripPrefix "refs/tags/")
      .filter(t => decodeRef(t) != t)
      .foreach { t =>
        val c = t concat "^{commit}" // commit the tag is referring to
        Seq("git", "show", "-s", "--pretty=format:%s%n%n%b", c) #|
            Process(Seq("git", "tag", "-a", "-F", "-", cleanRef(t), c), None,
              "GIT_COMMITTER_NAME" -> $("git", "show", "-s", "--pretty=format:%an", c),
              "GIT_COMMITTER_EMAIL" -> $("git", "show", "-s", "--pretty=format:%ae", c),
              "GIT_COMMITTER_DATE" -> $("git", "show", "-s", "--pretty=format:%ad", c)) !;
          Seq("git", "tag", "-d", t).!
    }
  }
}
